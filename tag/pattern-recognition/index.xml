<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pattern Recognition | Ramin&#39;s Homepage</title>
    <link>https://mrnabati.github.io/tag/pattern-recognition/</link>
      <atom:link href="https://mrnabati.github.io/tag/pattern-recognition/index.xml" rel="self" type="application/rss+xml" />
    <description>Pattern Recognition</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>© 2020 Ramin Nabati</copyright><lastBuildDate>Fri, 12 Jan 2018 19:47:25 -0400</lastBuildDate>
    <image>
      <url>https://mrnabati.github.io/images/icon_hua2ec155b4296a9c9791d015323e16eb5_11927_512x512_fill_lanczos_center_2.png</url>
      <title>Pattern Recognition</title>
      <link>https://mrnabati.github.io/tag/pattern-recognition/</link>
    </image>
    
    <item>
      <title>Spacenet 3: Road Network Detection</title>
      <link>https://mrnabati.github.io/project/01_spacenet/</link>
      <pubDate>Fri, 12 Jan 2018 19:47:25 -0400</pubDate>
      <guid>https://mrnabati.github.io/project/01_spacenet/</guid>
      <description>&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;In this challenge, we were tasked with finding automated methods for extracting map-ready road networks from high-resolution satellite imagery. Moving towards more accurate fully automated extraction of road networks will help bring innovation to computer vision methodologies applied to high-resolution satellite imagery, and ultimately help create better maps where they are needed most. The goal is to extract navigable road networks that represent roads from satellite images.&lt;/p&gt;
&lt;p&gt;While Pixel-level F1 score is a widely used segmentation evaluation metric, it is suboptimal for routing applications like road network detection. Because the F1 metric weights each pixel equally, a perfect score is only possible if all pixels are classified correctly as either road or background. With this metric, a brief break in an inferred road (caused for example by an overhanging tree) is lightly penalized while a slight error in road width is penalized heavily. This problem is illustrated in this figure:&lt;/p&gt;


















&lt;figure id=&#34;figure-left-ground-truth-road-mask-in-green-middle-proposal-mask-in-orange-right-proposal-mask-in-cyan-credit-adam-van-ettenhttpsmediumcomthe-downlinqspacenet-road-detection-and-routing-challenge-part-i-d4f59d55bfce&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;images/F1_score_issue.png&#34; data-caption=&#34;Left: Ground truth road mask in green. Middle: proposal mask in orange, Right: proposal mask in cyan. Credit: &amp;lt;a href=&amp;#34;https://medium.com/the-downlinq/spacenet-road-detection-and-routing-challenge-part-i-d4f59d55bfce&amp;#34;&amp;gt;Adam Van Etten&amp;lt;/a&amp;gt;&#34;&gt;


  &lt;img src=&#34;images/F1_score_issue.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Left: Ground truth road mask in green. Middle: proposal mask in orange, Right: proposal mask in cyan. Credit: &lt;a href=&#34;https://medium.com/the-downlinq/spacenet-road-detection-and-routing-challenge-part-i-d4f59d55bfce&#34;&gt;Adam Van Etten&lt;/a&gt;
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;According to the figure, while the orange road proposal achieves a lower F1 score (0.82) compared to the cyan proposal (0.95), it is a better proposal because the cyan road mask misses an important intersection and severs a road. This clearly shows that the pixel-based F1 score is suboptimal in this application.&lt;/p&gt;
&lt;p&gt;The Spacenet 3 challenge proposes a graph theoretic metric based upon Dijkstra’s shortest path algorithm, called the Average Path Length Similarity (APLS) metric. APLS sums the differences in optimal path lengths between nodes in the ground truth graph G and the proposal graph G’. More details on this metric is provided &lt;a href=&#34;https://medium.com/the-downlinq/spacenet-road-detection-and-routing-challenge-part-i-d4f59d55bfce&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;our-solution&#34;&gt;Our Solution&lt;/h2&gt;
&lt;p&gt;We approached the road detection problem in SpacenNet challenge as a semantic segmentation task in computer vision. Our model is based on a variant of &lt;a href=&#34;https://arxiv.org/abs/1505.04597&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;U-Net&lt;/a&gt;, one of the most successful and popular convolutional neural network architectures for image segmentation. Since we use a image segmentation network to attack this problem, our results are in the form of segmentation masks, which needs to be converted to a line-string graph format. To achieve this, we first extract a binary mask of the detected road network. The result would be something like this:&lt;/p&gt;


















&lt;figure id=&#34;figure-binary-road-map&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;images/Vegas.png&#34; data-caption=&#34;Binary road map.&#34;&gt;


  &lt;img data-src=&#34;images/Vegas.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;500&#34; height=&#34;500&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Binary road map.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Then we skeletonize the segmentation masks to make it as thin as possible. This step helps with converting the mask to nodes and edges in the next step.&lt;/p&gt;


















&lt;figure id=&#34;figure-skeletonized-road-map&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;images/Vegas_thin.png&#34; data-caption=&#34;Skeletonized road map.&#34;&gt;


  &lt;img data-src=&#34;images/Vegas_thin.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;500&#34; height=&#34;500&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Skeletonized road map.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Having lines representing detected roads in the image, the next step is converting the lines to line strings. We simply traverse the lines in each continuous segments and keep adding coordinates to a line string. To fill small gaps in the lines, we introduced memory to our traversing algorithm where the algorithm continues in the previous direction for a certain number of steps even after reaching the end of a line. If another line is found, the two line strings are joined and the traversal continues. Depending on the interval used to record the coordinates while traversing, the resulting line strings can have different number of nodes.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
