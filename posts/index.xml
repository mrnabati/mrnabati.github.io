<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Ramin's Homepage</title><link>https://mrnabati.github.io/posts/</link><description>Recent content in Posts on Ramin's Homepage</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 22 Jun 2020 20:17:31 -0400</lastBuildDate><atom:link href="https://mrnabati.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Adv. PyTorch: Configuring MS Visual Studio for Using PyToch C++ API in Windows</title><link>https://mrnabati.github.io/posts/004_adv_pytorch_integrating_pytorch_cpp_frontend_in_visual_studio_on_windows/</link><pubDate>Mon, 22 Jun 2020 20:17:31 -0400</pubDate><guid>https://mrnabati.github.io/posts/004_adv_pytorch_integrating_pytorch_cpp_frontend_in_visual_studio_on_windows/</guid><description>This tutorial will walk you through the required steps to configure and use the PyTorch C++ API (LibTorch) in Microsoft Visual Studio. Although the recommended build system for LibTorch is CMake, you might find yourself in situations where you need to integrate your code into an existing Visual Studio Project/Solution and don&amp;rsquo;t want to deal with CMake files in Windows. Following the steps in this tutorial should get you up and running with LibTorch in Visual Studio without needing to use CMake to build it.</description></item><item><title>Adv. PyTorch: Modifying the Last Layer</title><link>https://mrnabati.github.io/posts/003_adv_pytorch_modifying_the_last_layer/</link><pubDate>Sun, 21 Jun 2020 16:42:11 -0400</pubDate><guid>https://mrnabati.github.io/posts/003_adv_pytorch_modifying_the_last_layer/</guid><description>All the pre-trained models provided in the torchvision package in PyTorch are trained on the ImageNet dataset and can be used out of the box on this dataset. But often times you want to use these models on other available image datasets or even your own custom dataset. This usually requires modifying and fine-tuning the model to work with the new dataset. Changing the output dimension of the last layer in the model is usually among the first changes you need to make, and that&amp;rsquo;s the focus of this post.</description></item><item><title>Adv. PyTorch: Freezing Layers</title><link>https://mrnabati.github.io/posts/002_adv_pytorch_freezing_layers/</link><pubDate>Fri, 22 May 2020 13:42:11 -0400</pubDate><guid>https://mrnabati.github.io/posts/002_adv_pytorch_freezing_layers/</guid><description>If you&amp;rsquo;re planning to fine-tune a trained model on a different dataset, chances are you&amp;rsquo;re going to freeze some of the early layers and only update the later layers. I won&amp;rsquo;t go into the details of why you may want to freeze some layers and which ones should be frozen, but I&amp;rsquo;ll show you how to do it in PyTorch. Let&amp;rsquo;s get started!
We first need a pre-trained model to start with.</description></item><item><title>Enabling CAN on Nvidia Jetson Xavier</title><link>https://mrnabati.github.io/posts/000_enabling_can_on_nvidia_jetson_xavier_developer_kit/</link><pubDate>Fri, 09 Nov 2018 20:28:20 +0000</pubDate><guid>https://mrnabati.github.io/posts/000_enabling_can_on_nvidia_jetson_xavier_developer_kit/</guid><description>This tutorial covers the step by step process of integrating CAN transceivers and enabling the CAN controllers on an Nvidia Jetson Xavier developer kit.</description></item><item><title>Installing NVMe SSD on Nvidia Jetson Xavier</title><link>https://mrnabati.github.io/posts/001_installing_nvme_ssd_jetson_xavier/</link><pubDate>Fri, 09 Nov 2018 20:28:20 +0000</pubDate><guid>https://mrnabati.github.io/posts/001_installing_nvme_ssd_jetson_xavier/</guid><description>This tutorial covers the process of installing an NVMe M.2 SSD on the Nvidia Jetson Xavier developer kit.</description></item></channel></rss>